import nextcord
from nextcord import TextInputStyle, Button, ButtonStyle, Embed, Color
from nextcord.ui import Modal, TextInput, View
from ddapi import DDnetApi, DDstats

from .Bot import FuncomBotInter
from .model import TeeDat
from .ddnet import SkinRender
from config import clan_name, application, member_role


class Application(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.skin = SkinRender()
        self.ddapi = DDnetApi()
        self.ddstat = DDstats()

    @nextcord.ui.button(label="Submit", emoji="ü¶ä", style=ButtonStyle.green)
    async def application(self, _: Button, interaction: FuncomBotInter):
        modal = ClanJoin(self.ddapi, self.ddstat, self.skin)
        await interaction.response.send_modal(modal)


class Confirm(nextcord.ui.View):
    def __init__(self, im, nick):
        super().__init__(timeout=None)
        self.im: FuncomBotInter = im
        self.nick: str = nick

    @nextcord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=ButtonStyle.green)
    async def confirm(self, _: Button, im: FuncomBotInter):
        user = im.guild.get_member(self.im.user.id)
        if user is None:
            await im.message.edit(content="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", view=None)
            self.stop()
            return await im.send(embed=Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", description="–ü—Ä–∏—á–∏–Ω–æ–π —Ç–æ–≥–æ –º–æ–≥–ª–æ –±—ã—Ç—å:\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞\n- –£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", color=Color.red()))
        if member_role not in [i.id for i in user.roles]:
            await user.add_roles(im.guild.get_role(member_role))
        await im.client.add_member(self.im.user, self.nick)
        await user.send(embed=Embed(title="–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ", description="–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ —Å –∫–ª–∞–Ω–æ–º", color=Color.green()))
        await im.send(embed=Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç", color=Color.green()), ephemeral=True)
        ch = im.guild.get_channel(1251483757698093126)
        if ch is not None:
            await ch.send(embed=Embed(title="Add member", description=f"–¥–æ–±–∞–≤–ª–µ–Ω: {self.nick}({self.im.user.mention})\nBy {im.user.name}({im.user.id})", color=Color.green()))
        await im.client.update_status()
        await im.message.edit(view=None)
        del im.client.app[user.id]
        self.stop()

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å", style=ButtonStyle.grey)
    async def cancel(self, _: Button, im: FuncomBotInter):
        user = im.guild.get_member(self.im.user.id)
        if user is None:
            await im.message.edit(content="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", view=None)
            self.stop()
            return await im.send(embed=Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", color=Color.red()))
        await user.send(embed=Embed(title="EN\nYour application has been rejected\n\nRU\n–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", color=Color.red()))
        await im.send(embed=Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω", color=Color.green()), ephemeral=True)
        await im.message.edit(view=None)
        del im.client.app[user.id]
        self.stop()


class ClanJoin(Modal):
    def __init__(self, ddapi, ddstat, skin):
        super().__init__(
            f"–ó–∞—è–≤–∫–∞ –≤ –∫–ª–∞–Ω–∞: {clan_name}",
            timeout=1200
        )
        self.skin: SkinRender = skin
        self.ddapi: DDnetApi = ddapi
        self.ddstat: DDstats = ddstat

        self.nick = TextInput(label="–ù–∏–∫–Ω–µ–π–º", min_length=1, max_length=15, style=TextInputStyle.short, placeholder="Funcom‚ô™")
        self.age = TextInput(label="–í–æ—Ö—Ä–∞—Å—Ç", min_length=1, max_length=2, style=TextInputStyle.short, placeholder="15")
        self.about_user = TextInput(label="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ",  style=TextInputStyle.paragraph, required=False, min_length=1, max_length=500)
        self.add_item(self.nick)
        self.add_item(self.age)
        self.add_item(self.about_user)

    async def callback(self, im: FuncomBotInter):
        await im.response.defer(ephemeral=True)

        locale = im.get_langs().modal
        if im.client.app.get(im.user.id, False):
            return await im.send(embed=Embed(title=locale.wait, color=Color.red()))

        te: TeeDat = await im.client.DB.get_tee(im.id)
        if te is not None:
            return await im.send(embed=Embed(title=locale.registred))

        ch = im.guild.get_channel(application.get("mod_channel"))
        if ch is None:
            return

        age = self.age.value
        if not age.isnumeric():
            return await im.send(embed=Embed(title=locale.agenotallow))

        if int(age) < 13:
            await ch.send(embed=Embed(title=f"–†–µ–ø–æ—Ä—Ç –Ω–∞ {im.user.name}({im.user.id})", description="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Discord, —É—á–∞—Å—Ç–Ω–∏–∫—É –º–µ–Ω—å—à–µ 13-—Ü–µ—Ç–∏ –ª–µ—Ç", color=Color.red()))

        # get_player_data

        player = await self.ddapi.player(self.nick.value)
        g_player = await self.ddstat.player(self.nick.value)
        profile = None
        if g_player is not None:
            profile = g_player.profile

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞

        pp, about = '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã' if player is None or player.points is None else player.points.points, ''

        val = self.about_user.value
        if val is not None:
            about = "–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: " + self.about_user.value
        embed = Embed(description=f"–ó–∞—è–≤–∫–∞ –æ—Ç {im.user.name}({im.user.id}), –≤–æ–∑—Ä–∞—Å—Ç: {age}\n–ù–∏–∫: {self.nick.value}; pp: {pp}\n{about}", color=Color.purple())

        us = None
        if profile is not None:
            us = await self.skin.get_skin_url(profile.skin_name, profile.skin_color_body, profile.skin_color_feet)
        
        if profile is not None and us is not None and us.url is not None:
            embed.set_thumbnail(url=us.url)

        confirm = Confirm(im, self.nick.value)
        await ch.send(embed=embed, view=confirm)
        await im.send(embed=Embed(title=locale.sended, description=locale.wait_moder, color=Color.purple()), ephemeral=True)
        im.client.app[im.user.id] = True
